# Let author empty because for some reason these infos get exported
# _after_ all latex_headers, so we cannot use them (or can we?)
#+author:
#+options: toc:nil
#+language: pt
#+latex_class: article
#+latex_class_options: [a4paper, 11pt]
# ==========================================================
# ======================= Packages =========================
# ==========================================================
#+latex_header: \usepackage[brazil]{babel}
#+latex_header: \usepackage[utf8]{inputenc}
#+latex_header: \usepackage{fancyhdr}
#+latex_header: \usepackage[margin=1.2in]{geometry}
#+latex_header: \usepackage[table, dvipsnames]{xcolor}
#+latex_header: \usepackage{booktabs}
#+latex_header: \usepackage{array}
#+latex_header: \usepackage{enumitem}
#+latex_header: \usepackage{datetime2}
#+latex_header: \usepackage{tikz}
#+latex_header: \usetikzlibrary{matrix, positioning}
# ==========================================================
# ========================== Info ==========================
# ==========================================================
#+latex_header: \makeatletter
#+latex_header: \DeclareRobustCommand*\course[1]{\gdef\@course{#1}}
#+latex_header: \DeclareRobustCommand*\institution[1]{\gdef\@institution{#1}}
#+latex_header: \DeclareRobustCommand*\semester[1]{\gdef\@semester{#1}}
#+latex_header: \title{Trabalho Prático 1 - Ordenação}
#+latex_header: \author{Profs. Gleison Mendonça e Luigi Soares}
#+latex_header: \course{Programação e Desenvolvimento de Software I}
#+latex_header: \institution{DCC / ICEx / UFMG}
#+latex_header: \semester{2022.2}
#+latex_header: \let\thetitle\@title{}
#+latex_header: \let\theauthor\@author{}
#+latex_header: \let\thecourse\@course{}
#+latex_header: \let\theinstitution\@institution{}
#+latex_header: \let\thesemester\@semester{}
#+latex_header: \let\thedate\@date{}
#+latex_header: \makeatother
#+latex_header: \DTMnewdatestyle{brDateStyle}{%
#+latex_header:     \renewcommand{\DTMdisplaydate}[4]{##3/##2/##1}%
#+latex_header:     \renewcommand{\DTMDisplaydate}{\DTMdisplaydate}}
#+latex_header: \DTMsetdatestyle{brDateStyle}
# ==========================================================
# ======================= Page Style =======================
# ==========================================================
#+latex_header: \pagestyle{fancy}
#+latex_header: \fancyhf{}
#+latex_header: \setlength{\headheight}{15pt}
#+latex_header: \lhead{\theauthor \\ \thecourse}
#+latex_header: \rhead{\theinstitution \\ \thesemester}
#+latex_header: \rfoot{\thepage}
#+latex_header: \hypersetup{
#+latex_header:     colorlinks,
#+latex_header:     linkcolor={red!50!black},
#+latex_header:     citecolor={blue!50!black},
#+latex_header:     urlcolor={blue!80!black}
#+latex_header: }

# ==========================================================
# ========================= Title ==========================
# ==========================================================
\begin{center}
\Large\bfseries\thetitle
\end{center}

Um algoritmo de ordenação é um algoritmo que coloca os elementos de uma lista
em uma determinada ordem (por exemplo, ascendente ou descendente). Formalmente,
o resultado de um algoritmo de ordenação deve satisfazer duas condições:

- A saída está em ordem monotônica (nenhum elemento é menor/maior que o anterior,
  de acordo com a ordem requerida)
- A saída é uma permutação da sequência original (i.e. mantém todos os elementos originais)

Vamos considerar uma ordem ascendente. O trabalho é dividido em 3 etapas:

1. Implementar uma função *swap* (troca), que recebe um arranjo *A* e duas posições
   *i* e *j* e troca o valor de *A[i]* e *A[j]*. Esta função não possui nenhum retorno
   (i.e. void). A troca deve ser feita no arranjo passado por parâmetro.

2. Implementar uma função *sorted* (ordenado), que recebe um arranjo *A*, o tamanho
   *n* do arranjo e retorna verdadeiro se *A* está ordenado ou falso caso contrário.

3. Implementar o algoritmo de ordenação conhecido como *Bubble Sort*. Você *deve* implementar este
   algoritmo em específico. A função *bubblesort* recebe um arranjo *A* e o tamanho *n* do arranjo.
   A função não possui nenhum retorno (i.e. void). A ordenação deve ser feita no próprio arranjo
   *A* passado por parâmetro para a função. \\

   O Bubble Sort, ou ordenação por flutuação (literalmente, "por bolha"), é um algoritmo de ordenação
   dos mais simples. A ideia é percorrer o arranjo diversas vezes, e a cada passagem fazer flutuar para
   o topo o maior elemento da sequência. Para tanto, comparamos dois elementos adjacentes e, caso estejam
   na ordem incorreta, os trocamos de lugar. Para exemplificar, considere o arranjo [5, 2, 8, 3, 7]:

   \begin{center}
   \begin{tikzpicture}[array/.style={
        draw, text=white, font=\bfseries, fill=NavyBlue, minimum width=2em,
        minimum height=2em, outer sep=0pt
    }]
        \matrix (A0) [matrix of math nodes, nodes={array, anchor=center}]
            {|[fill=RedOrange]|5 & |[fill=RedOrange]|2 & 8 & 3 & 7 \\};
        \node[right = 0.5cm of A0, font=\bfseries] (swap0) {5 > 2, troca!};

        \matrix[below = 0.25cm of A0] (A1) [matrix of math nodes, nodes={array, anchor=center}]
            {2 & |[fill=RedOrange]|5 & |[fill=RedOrange]|8 & 3 & 7 \\};
        \node[right = 0.5cm of A1, font=\bfseries] (swap1) {5 < 8, não troca!};

        \matrix[below = 0.25cm of A1] (A2) [matrix of math nodes, nodes={array, anchor=center}]
            {2 & 5 & |[fill=RedOrange]|8 & |[fill=RedOrange]|3 & 7 \\};
        \node[right = 0.5cm of A2, font=\bfseries] (swap2) {8 > 3, troca!};

        \matrix[below = 0.25cm of A2] (A3) [matrix of math nodes, nodes={array, anchor=center}]
            {2 & 5 & 3 & |[fill=RedOrange]|8 & |[fill=RedOrange]|7 \\};
        \node[right = 0.5cm of A3, font=\bfseries] (swap2) {8 > 7, troca!};

        \matrix[below = 0.25cm of A3] (A4) [matrix of math nodes, nodes={array, anchor=center}]
            {2 & 5 & 3 & 7 & |[fill=ForestGreen]|8 \\};
   \end{tikzpicture}
   \end{center}

  Note que, ao final das trocas, o maior elemento (8) foi movido para a posição
   correta.  O restante do arranjo (2, 5, 3, 7), no entanto, ainda não está
   ordenado. Encontramos a posição do maior elemento. Agora, devemos repetir o
   processo para o subarranjo que ainda não está ordenado, para encontrar a
   posição do segundo maior elemento, do terceiro maior elemento e assim por
   diante. Quando podemos parar? Pense nisso!
